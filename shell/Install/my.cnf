###https://blog.linuxeye.cn/379.html

[mysql]
socket = /tmp/mysql.sock
default-character-set=utf8

[mysqld]
skip-host-cache
skip-name-resolve
character_set_server=utf8
port = 3306
datadir=/data/app/mysql/
socket=/tmp/mysql.sock
user=mysql
symbolic-links=0

server_id = 116
log-bin = master-bin
##混合模式
binlog_format = mixed
##不区分大小写
lower_case_table_names=1
##开启慢查询 单位秒
slow_query_log = on
slow_query_log_file = /data/logslow/mysql_slow.log
long_query_time=20

##最大连接数
max_connections = 3000
##超过7天的binlog删除
expire_logs_days = 7
##增加heap表的大小，可达到提高联接查询速度
tmp_table_size = 512M
max_heap_table_size = 256M
##超出该参数值个数的中断错误连接，被禁止连接
max_connect_errors = 10
#default_table_type = INNODB#
##事务隔离级别
transaction_isolation = READ-COMMITTED
## 服务器关闭非交互连接之前等待活动的秒数
wait_timeout=86400


##指定用于索引的缓冲区大小
key_buffer_size = 16M
##批量插入缓存大小
bulk_insert_buffer_size = 16M
##服务器发送和接受的最大包长度
max_allowed_packet = 512M
##执行排序使用的缓冲大小
sort_buffer_size = 16M
max_length_for_sort_data = 8388608
##读入缓冲区大小
read_buffer_size = 16M
##联合查询操作所能使用的缓冲区大小
join_buffer_size = 16M
##随机读缓冲区大小
read_rnd_buffer_size = 16M
##5.7 drop
#thread_concurrency = 8
query_cache_type = 0
##查询缓冲大小
query_cache_size = 128M

##一个事务，在没有提交的时候，产生的日志，记录到Cache中
binlog_cache_size = 16M
##InnoDB使用一个缓冲池来保存索引和原始数据
innodb_buffer_pool_size = 2G
##CPU 核数来更改
innodb_read_io_threads = 1
innodb_write_io_threads = 16
innodb_thread_concurrency = 16
##日志文件所用的内存大小
innodb_log_buffer_size = 16M
##如果设为2,每次提交事务都会写日志，但并不会执行刷的操作
innodb_flush_log_at_trx_commit = 2
##确定数据日志文件的大小
innodb_log_file_size = 1G
##以循环方式将日志文件写到多个文件
innodb_log_files_in_group = 3
innodb_autoextend_increment = 128M
##若需要的存储引擎被禁用或未编译，则抛出错误
##严格模式
##禁止GRANT创建密码为空的用户
##不允许插入“0000-00-00 00:00:00”形如此类的零日期
##不允许月份和日期为零
##在insert或update过程中，若数据被零除（或MOD(x,0），则产生错误
sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO 
##为timestamp类型的列明确的注明default值
explicit_defaults_for_timestamp=true


[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/data/mysql/sqlsale.pid

[mysqldump]
quick
max_allowed_packet = 32M
